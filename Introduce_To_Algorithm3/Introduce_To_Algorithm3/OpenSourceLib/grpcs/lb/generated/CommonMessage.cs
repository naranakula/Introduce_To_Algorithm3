// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.common.cmlu.messages {

  /// <summary>Holder for reflection information generated from CommonMessage.proto</summary>
  public static partial class CommonMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for CommonMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNDb21tb25NZXNzYWdlLnByb3RvEhhjb20uY29tbW9uLmNtbHUubWVzc2Fn",
            "ZXMizgEKDUNvbW1vbk1lc3NhZ2USCgoCaWQYASABKAkSFAoMbWVzc2FnZV90",
            "eXBlGAIgASgJEhcKD21lc3NhZ2Vfc3VidHlwZRgDIAEoCRIPCgdpc190ZXh0",
            "GAQgASgIEhQKDHRleHRfY29udGVudBgFIAEoCRIVCg1ieXRlc19jb250ZW50",
            "GAYgASgMEhoKEmNvbnRlbnRfc3RhbXBfdGltZRgHIAEoCRITCgtjcmVhdGVf",
            "dGltZRgIIAEoCRITCgtyb3V0aW5nX2tleRgJIAEoCUIbqgIYY29tLmNvbW1v",
            "bi5jbWx1Lm1lc3NhZ2VzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.common.cmlu.messages.CommonMessage), global::com.common.cmlu.messages.CommonMessage.Parser, new[]{ "Id", "MessageType", "MessageSubtype", "IsText", "TextContent", "BytesContent", "ContentStampTime", "CreateTime", "RoutingKey" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///定义消息
  /// </summary>
  public sealed partial class CommonMessage : pb::IMessage<CommonMessage> {
    private static readonly pb::MessageParser<CommonMessage> _parser = new pb::MessageParser<CommonMessage>(() => new CommonMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.common.cmlu.messages.CommonMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonMessage(CommonMessage other) : this() {
      id_ = other.id_;
      messageType_ = other.messageType_;
      messageSubtype_ = other.messageSubtype_;
      isText_ = other.isText_;
      textContent_ = other.textContent_;
      bytesContent_ = other.bytesContent_;
      contentStampTime_ = other.contentStampTime_;
      createTime_ = other.createTime_;
      routingKey_ = other.routingKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonMessage Clone() {
      return new CommonMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///消息Id  唯一标志一条消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_type" field.</summary>
    public const int MessageTypeFieldNumber = 2;
    private string messageType_ = "";
    /// <summary>
    ///消息类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageType {
      get { return messageType_; }
      set {
        messageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_subtype" field.</summary>
    public const int MessageSubtypeFieldNumber = 3;
    private string messageSubtype_ = "";
    /// <summary>
    ///消息子类型  消息类型和消息子类型唯一确定消息的具体格式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageSubtype {
      get { return messageSubtype_; }
      set {
        messageSubtype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_text" field.</summary>
    public const int IsTextFieldNumber = 4;
    private bool isText_;
    /// <summary>
    ///真表示消息内容为文本格式 假表示消息内容为bytes格式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsText {
      get { return isText_; }
      set {
        isText_ = value;
      }
    }

    /// <summary>Field number for the "text_content" field.</summary>
    public const int TextContentFieldNumber = 5;
    private string textContent_ = "";
    /// <summary>
    ///当is_text为true时的文本格式 的 消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextContent {
      get { return textContent_; }
      set {
        textContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_content" field.</summary>
    public const int BytesContentFieldNumber = 6;
    private pb::ByteString bytesContent_ = pb::ByteString.Empty;
    /// <summary>
    ///当is_text为false时的bytes数组格式的消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesContent {
      get { return bytesContent_; }
      set {
        bytesContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_stamp_time" field.</summary>
    public const int ContentStampTimeFieldNumber = 7;
    private string contentStampTime_ = "";
    /// <summary>
    ///消息内容的印章时间  表示消息内容最近一次的更新时间  为空表示没有该时间 否则格式为yyyyMMddHHmmssfff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentStampTime {
      get { return contentStampTime_; }
      set {
        contentStampTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 8;
    private string createTime_ = "";
    /// <summary>
    ///消息创建时间 采用所在机器的时间和时区 格式yyyyMMddHHmmss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "routing_key" field.</summary>
    public const int RoutingKeyFieldNumber = 9;
    private string routingKey_ = "";
    /// <summary>
    ///消息的routing key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoutingKey {
      get { return routingKey_; }
      set {
        routingKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MessageType != other.MessageType) return false;
      if (MessageSubtype != other.MessageSubtype) return false;
      if (IsText != other.IsText) return false;
      if (TextContent != other.TextContent) return false;
      if (BytesContent != other.BytesContent) return false;
      if (ContentStampTime != other.ContentStampTime) return false;
      if (CreateTime != other.CreateTime) return false;
      if (RoutingKey != other.RoutingKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (MessageType.Length != 0) hash ^= MessageType.GetHashCode();
      if (MessageSubtype.Length != 0) hash ^= MessageSubtype.GetHashCode();
      if (IsText != false) hash ^= IsText.GetHashCode();
      if (TextContent.Length != 0) hash ^= TextContent.GetHashCode();
      if (BytesContent.Length != 0) hash ^= BytesContent.GetHashCode();
      if (ContentStampTime.Length != 0) hash ^= ContentStampTime.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (RoutingKey.Length != 0) hash ^= RoutingKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (MessageType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageType);
      }
      if (MessageSubtype.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MessageSubtype);
      }
      if (IsText != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsText);
      }
      if (TextContent.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TextContent);
      }
      if (BytesContent.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(BytesContent);
      }
      if (ContentStampTime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ContentStampTime);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CreateTime);
      }
      if (RoutingKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RoutingKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (MessageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageType);
      }
      if (MessageSubtype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageSubtype);
      }
      if (IsText != false) {
        size += 1 + 1;
      }
      if (TextContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextContent);
      }
      if (BytesContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesContent);
      }
      if (ContentStampTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentStampTime);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (RoutingKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoutingKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.MessageType.Length != 0) {
        MessageType = other.MessageType;
      }
      if (other.MessageSubtype.Length != 0) {
        MessageSubtype = other.MessageSubtype;
      }
      if (other.IsText != false) {
        IsText = other.IsText;
      }
      if (other.TextContent.Length != 0) {
        TextContent = other.TextContent;
      }
      if (other.BytesContent.Length != 0) {
        BytesContent = other.BytesContent;
      }
      if (other.ContentStampTime.Length != 0) {
        ContentStampTime = other.ContentStampTime;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.RoutingKey.Length != 0) {
        RoutingKey = other.RoutingKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            MessageType = input.ReadString();
            break;
          }
          case 26: {
            MessageSubtype = input.ReadString();
            break;
          }
          case 32: {
            IsText = input.ReadBool();
            break;
          }
          case 42: {
            TextContent = input.ReadString();
            break;
          }
          case 50: {
            BytesContent = input.ReadBytes();
            break;
          }
          case 58: {
            ContentStampTime = input.ReadString();
            break;
          }
          case 66: {
            CreateTime = input.ReadString();
            break;
          }
          case 74: {
            RoutingKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
