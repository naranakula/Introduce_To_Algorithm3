ZooKeeper是分布式开源协同服务。
uses a data model styled after the familiar directory tree structure of file systems.
文件结构用/分割，顶级是/
it runs in java 并提供Java和C的API.
The ZooKeeper implementation 重视 high performance, highly available, strictly ordered access. 
目录的每个节点的读写是原子的。
Sequential Consistency - Updates from a client will be applied in the order that they were sent.
Atomicity - Updates either succeed or fail. No partial results.
Single System Image - A client will see the same view of the service regardless of the server that it connects to.
Reliability - Once an update has been applied, it will persist from that time forward until a client overwrites the update.
Timeliness及时性 - The clients view of the system is guaranteed to be up-to-date within a certain time bound.
ZooKeeper提供简单的API,它仅仅支持如下操作：
	create:在树中创建一个节点
	delete:删除一个节点
	exists:测试一个节点是否存在
	get data:从节点读取数据
	set data:向节点中写数据
	get children：获取子节点列表
	sync: waits for data to be propagated

运行ZooKeeper，在conf目录下床架zoo.cfg配置文件（utf-8 无bom），文件中填入如下内容：
	tickTime=2000
	dataDir=./data
	clientPort=2181

tickTime:单位毫秒 It is used to do heartbeats and the minimum session timeout will be twice the tickTime.
dataDir:存储in-memory database快照 文件夹必须存在
clientPort：the port to listen for client connections

运行zooKeeper ，使用命令bin/zkServer.cmd start
创建zooKeeperStart.bat 内容如下:
	cd E:\softwares\zookeeper-3.4.9
	bin/zkServer.cmd



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































