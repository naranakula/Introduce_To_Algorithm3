using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Introduce_To_Algorithm3.Common.Utils
{
    /// <summary>
    /// 
    /// </summary>
    public class HashFunc
    {
        /// <summary>
        /// hash o to [0,size-1]
        /// </summary>
        /// <param name="o"></param>
        /// <param name="size">if the size is prime, the result is better</param>
        /// <returns></returns>
        public int HashReminder(object o, int size)
        {
            return System.Math.Abs(o.GetHashCode()) % size;
        }

        /// <summary>
        /// hash o to [0,size-1]
        /// </summary>
        /// <param name="o"></param>
        /// <param name="size"></param>
        /// <returns></returns>
        public int HashMultiply(object o, int size)
        {
            double d = ((System.Math.Sqrt(5) - 1) / 2 * o.GetHashCode());
            d = d - (int)d;
            return (int)(d * size);
        }
    }


    public class UniversalHash
    {
        private int size;
        private int a, b, p;
        private int[] primes = {
2146554701,
2146554677,
2146554647,
2146554617,
2146554601,
2146554569,
2146554563,
2146554551,
2146554547,
2146554541,
2146554533,
2146554517,
2146554503,
2146554493,
2146554481,
2146554479,
2146554401,
2146554391,
2146554379,
2146554349,
2146554329,
2146554257,
2146554253,
2146554211,
2146554209,
2146554191,
2146554167,
2146554133,
2146554121,
2146554077,
2146554043,
2146554037,
2146554029,
2146554017,
2146553971,
2146553957,
2146553953,
2146553947,
2146553923,
2146553921,
2146553917,
2146553891,
2146553881,
2146553879,
2146553833,
2146553819,
2146553791,
2146553777,
2146553743,
2146553699,
2146553657,
2146553641,
2146553611,
2146553609,
2146553599,
2146553587,
2146553543,
2146553503,
2146553471,
2146553447,
2146553417,
2146553413,
2146553389,
2146553363,
2146553351,
2146553327,
2146553287,
2146553267,
2146553239,
2146553219,
2146553203,
2146553197,
2146553089,
2146553081,
2146553047,
2146553041,
2146553009,
2146552981,
2146552963,
2146552951,
2146552937,
2146552913,
2146552897,
2146552883,
2146552879,
2146552861,
2146552843,
2146552829,
2146552801,
2146552799,
2146552781,
2146552777,
2146552739,
2146552679,
2146552657,
2146552649,
2146552631,
2146552627,
2146552621,
2146552619,
2146552609,
2146552591,
2146552571,
2146552553,
2146552519,
2146552501,
2146552489,
2146552483,
2146552469,
2146552451,
2146552433,
2146552423,
2146552409,
2146552393,
2146552381,
2146552361,
2146552357,
2146552351,
2146552333,
2146552297,
2146552283,
2146552273,
2146552271,
2146552267,
2146552249,
2146552237,
2146552229,
2146552223,
2146552201,
2146552193,
2146552183,
2146552157,
2146552117,
2146552049,
2146552021,
2146552019,
2146552013,
2146551989,
2146551973,
2146551863,
2146551773,
2146551769,
2146551763,
2146551731,
2146551713,
2146551697,
2146551691,
2146551689,
2146551683,
2146551677,
2146551661,
2146551653,
2146551647,
2146551643,
2146551611,
2146551601,
2146551599,
2146551593,
2146551577,
2146551557,
2146551479,
2146551457,
2146551439,
2146551419,
2146551409,
2146551397,
2146551389,
2146551347,
2146551313,
2146551301,
2146551287,
2146551233,
2146551191,
2146551179,
2146551167,
2146551161,
2146551149,
2146551137,
2146551103,
2146551101,
2146551089,
2146551083,
2146551059,
2146551031,
2146550981,
2146550977,
2146550963,
2146550953,
2146550929,
2146550909,
 };
        /// <summary>
        /// map object to [0,size-1]
        /// </summary>
        /// <param name="size"></param>
        public UniversalHash(int size)
        {
            this.size = size;
            Random rand = new Random();
            p = primes[rand.Next(primes.Length)];
            a = rand.Next(1, p);
            b = rand.Next(p);
        }


        /// <summary>
        /// h(k) = (a*o.gethashcode+b)mod P mode size
        /// </summary>
        /// <param name="o"></param>
        /// <returns></returns>
        public int GetHashCode(object o)
        {
            return (a * o.GetHashCode() + b) % p % size;
        }
    }
}
