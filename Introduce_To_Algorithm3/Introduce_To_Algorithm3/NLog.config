<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off">


  <!-- 
  See https://github.com/nlog/nlog/wiki/Configuration-file 
  for information on customizing logging rules and outputs.
   -->
  <targets async="true">
<!--创建另外的线程写，而不阻塞当前线程 sync配置项-->
    <!-- 
    add your targets here 
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <!--
    Write events to a file with the date in the filename. 
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->
  
      <!-- longdate:当前的日期和时间   callsite:产生日志信息的类和方法的名字  shortdate:日期
     concurrentWirtes – 是否允许使用通过多个进程的方式，将日志信息并行写入文件中。其取值类型为Boolean，默认为true。
    bufferSize – 日志文件缓存区大小（单位：字节）。其取值类型为Integer，默认值为32768（32KB）。
    createDirs – 是否允许自动创建（不存在的）目录。其取值类型为Boolean，默认为true。
    实际应用中建议去掉 ${callsite}，影响性能
    ${threadid} ${threadname}  线程id 线程名
    ${logger} - The logger name.
    ${longdate} - The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.ffff.
    ${callsite} - The call site (class name, method name and source information).
    ${stacktrace} - Stack trace renderer.
    ${basedir} - The current application domain's base directory. 应用程序所在目录，不是当前目录
    ${level} - The log level.
    ${shortdate} - The short date in a sortable format yyyy-MM-dd.
    ${date:universalTime=Boolean:format=String:culture=Culture} Example: ${date:format=yyyy-MM-dd HH\:mm\:ss.fff}
    -->
    <!--<target name="filetg" xsi:type="File" encoding="UTF-8" bufferSize="32768" autoFlush="true" fileName="${basedir}/logs/${level}/${shortdate}/${date:format=HH}.log" layout="[${longdate}] [${callsite}] [${level}] ${message}" />-->
    <target name="filetg" xsi:type="File" encoding="UTF-8" bufferSize="32768" autoFlush="true" fileName="${basedir}/logs/${level}/${shortdate}/${date:format=HH}.log" layout="[${longdate}] [${level:padding=-5}] ${message}${newline}" />
   
    <!--截取所有的日志  实际应用中建议去掉 ${callsite}，影响性能-->
    <!--<target name="allFiletg" xsi:type="File" encoding="UTF-8" bufferSize="32768" autoFlush="true" fileName="${basedir}/logs/All/${shortdate}/${date:format=HH}.log" layout="[${longdate}] [${callsite}] [${level}] ${message}" />-->
    <target name="allFiletg" xsi:type="File" encoding="UTF-8" bufferSize="32768" autoFlush="true" fileName="${basedir}/logs/All/${shortdate}/${date:format=HH}.log" layout="[${longdate}] [${level:padding=-5}] ${message}${newline}" />
    
    <!--实际应用中建议去掉 ${callsite}，影响性能  encoding="UTF-8"  指定控制台显示编码-->
    <target name="consoletg" xsi:type="ColoredConsole" layout="[${longdate}] [${level:padding=-5}] ${message}${newline}"/>
  </targets>

  <rules>
    <!-- add your logging rules here -->

    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->
  
    <!--将所有的日志发送到consoletg,filetg

rules定义了路由规则，每个logger对应一个规则，默认所有的规则都要匹配一遍
name - 日志源/记录者的名字 (允许使用通配符*)
minlevel - 该规则所匹配日志范围的最低级别
maxlevel - 该规则所匹配日志范围的最高级别
level - 该规则所匹配的单一日志级别
levels - 该规则所匹配的一系列日志级别，由逗号分隔。
writeTo - 规则匹配时日志应该被写入的一系列目标，由逗号分隔。
final - 标记当前规则为最后一个规则。其后的规则即时匹配也不会被运行。
Trace,Debug,Info,Warn,Error,Fatal
尽量使用Debug打印不重要的信息， Debug及以下级别在实际部署中将会去掉
enalbed配置规则是否生效  改成false可以不记日志
    -->
    <!--<logger name="*" levels="Trace,Debug,Info,Warn,Error,Fatal" enabled="true" writeTo="filetg,allFiletg,consoletg" />-->
    <logger name="*" levels="Trace,Debug,Info,Warn,Error,Fatal" enabled="true" writeTo="filetg,allFiletg" />
    <logger name="*" levels="Trace,Debug,Info,Warn,Error,Fatal" enabled="true" writeTo="consoletg" />
  </rules>
</nlog>