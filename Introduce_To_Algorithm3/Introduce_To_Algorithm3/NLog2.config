<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off">


  <!-- 
  See https://github.com/nlog/nlog/wiki/Configuration-file 
  for information on customizing logging rules and outputs.
   -->
  <targets async="true">
    <!--创建另外的线程写，而不阻塞当前线程 sync配置项-->
    <!-- 
    add your targets here 
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->

    <!--
    Write events to a file with the date in the filename. 
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->

    <!-- longdate:当前的日期和时间   callsite:产生日志信息的类和方法的名字  shortdate:日期
     concurrentWirtes – 是否允许使用通过多个进程的方式，将日志信息并行写入文件中。其取值类型为Boolean，默认为true。
    bufferSize – 日志文件缓存区大小（单位：字节）。其取值类型为Integer，默认值为32768（32KB）。
    createDirs – 是否允许自动创建（不存在的）目录。其取值类型为Boolean，默认为true。
    实际应用中建议去掉 ${callsite}，影响性能
    ${threadid} ${threadname}  线程id 线程名
    ${logger} - The logger name.
    ${longdate} - The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.ffff.
    ${callsite} - The call site (class name, method name and source information).
    ${stacktrace} - Stack trace renderer.
    ${basedir} - The current application domain's base directory. 应用程序所在目录，不是当前目录
    ${level} - The log level.
    ${shortdate} - The short date in a sortable format yyyy-MM-dd.
    ${date:universalTime=Boolean:format=String:culture=Culture} Example: ${date:format=yyyy-MM-dd HH\:mm\:ss.fff}
    -->
    <!--<target name="filetg" xsi:type="File" encoding="UTF-8" bufferSize="32768" autoFlush="true" fileName="${basedir}/logs/${level}/${shortdate}/${date:format=HH}.log" layout="[${longdate}] [${callsite}] [${level}] ${message}${newline}" />-->
    <target name="filetg" xsi:type="File" encoding="UTF-8" bufferSize="32768" autoFlush="true" fileName="${basedir}/logs/${level}/${shortdate}/${date:format=HH}.log" layout="[${longdate}] [${level:padding=-5}] ${message}" />

    <!--截取所有的日志  实际应用中建议去掉 ${callsite}，影响性能-->
    <!--<target name="allFiletg" xsi:type="File" encoding="UTF-8" bufferSize="32768" autoFlush="true" fileName="${basedir}/logs/All/${shortdate}/${date:format=HH}.log" layout="[${longdate}] [${callsite}] [${level}] ${message}${newline}" />-->
    <target name="allFiletg" xsi:type="File" encoding="UTF-8" bufferSize="32768" autoFlush="true" fileName="${basedir}/logs/All/${shortdate}/${date:format=HH}.log" layout="[${longdate}] [${level:padding=-5}] ${message}" />

    <!--实际应用中建议去掉 ${callsite}，影响性能  encoding="UTF-8"  指定控制台显示编码
    
    useDefaultRowHightlingtingRules:是否使用默认的高亮规则，如果明确了高亮规则，则替换掉默认的  默认规则如下
Condition	Foreground Color	Background Color
level == LogLevel.Fatal	Red	NoChange
level == LogLevel.Error	Yellow	NoChange
level == LogLevel.Warn	Magenta	NoChange
level == LogLevel.Info	White	NoChange
level == LogLevel.Debug	Gray	NoChange
level == LogLevel.Trace	DarkGray	NoChange
      
      -->
    <target name="consoletg" xsi:type="ColoredConsole" useDefaultRowHighlightingRules="true" layout="[${longdate}] [${level:padding=-5}] ${message}${newline}">
      <highlight-row backgroundColor="NoChange" foregroundColor="White" condition="level == LogLevel.Trace" />
      <highlight-row backgroundColor="NoChange" foregroundColor="Green" condition="level == LogLevel.Debug" />
      <highlight-row backgroundColor="NoChange" foregroundColor="Cyan" condition="level == LogLevel.Info" />
      <highlight-row backgroundColor="NoChange" foregroundColor="Yellow" condition="level == LogLevel.Warn" />
      <highlight-row backgroundColor="NoChange" foregroundColor="Magenta" condition="level == LogLevel.Error" />
      <highlight-row backgroundColor="NoChange" foregroundColor="Red" condition="level == LogLevel.Fatal" />
    </target>



    <!-- 邮件目标 -->
    <target name="mailTg" xsi:type="Mail" smtpServer="smtp.gmail.com"
            smtpPort="587"
            smtpAuthentication="Basic"
            smtpUserName="user@gmail.com"
            smtpPassword="password"
            enableSsl="true"
            from="emailaddress@gmail.com"
            to="recipient@example.com"
            cc="alice@example.com;bob@example.com;charlie@example.com" subject="NLogDemo logs"
            addNewLines="true" timeout="8000"/>

    <!-- Async异步 缓冲的写执行 在rule中设置writeto时，使用asyncTg
    queueLimit - Limit on the number of requests in the lazy writer thread request queue. Integer Default: 10000

timeToSleepBetweenBatches - Time in milliseconds to sleep between batches. Integer Default: 50. When set to 0, this will lead to a high CPU usage.

batchSize - Number of log events that should be processed in a batch by the lazy writer thread. Integer Default: 100 (NLog 4.4.2 and newer has Default: 200)

fullBatchSizeWriteLimit - Max number of consecutive full batchSize writes to perform within the same timer event. Integer Default: 5. Introduced in NLog 4.4.2

overflowAction - Action to be taken when the lazy writer thread request queue count exceeds the set limit. Default: Discard
Possible values:

Block - Block until there's more room in the queue.
Discard - Discard the overflowing item.
Grow - Grow the queue.
optimizeBufferReuse - Instead of allocating new buffers for every batchSize write, then it reuse the same buffer. This means that the wrapped target no longer can take ownership of the buffers. All targets in the NLog package supports this mode. It is enabled automatically if the wrapped target has enabled optimizeBufferReuse. Introduced in NLog 4.4.2
    不建议使用这种方式，在targets标签上使用async属性
    -->
    <wrapper-target name="asyncTg" xsi:type="AsyncWrapper" queueLimit="10000">
      <target name="internalFileTg" xsi:type="File" encoding="UTF-8" bufferSize="32768" autoFlush="true" fileName="${basedir}/logs/${level}/${shortdate}/${date:format=HH}.log" layout="[${longdate}] [${level:padding=-5}] ${message}${newline}"/>
    </wrapper-target>

    <!--
    数据库目标  写数据库不在事务中进行
    dbUserName:数据库用户名 . If the ConnectionString is not provided this value will be used to construct the "User ID=" part of the connection string.
    dbProvider - Name of the database provider. Default: sqlserver  The parameter name should be a provider invariant name as registered in machine.config or app.config.Common values are:

System.Data.SqlClient -
System.Data.SqlServerCe.3.5 -
System.Data.OracleClient - (deprecated in .NET Framework 4)
Oracle.DataAccess.Client -
System.Data.SQLite -
    
    useTransactions - This option was removed in NLog 4.0 because the logging code always runs outside of transaction. This ensures that the log gets written to the database if you rollback the main transaction because of an error and want to log the error.
    connectionStringName - Name of the connection string. The ProviderName of the connectionstring will be used to determine the SQL type. 
    connectionString - Connection string. When provided, it overrides the values specified in DBHost, DBUserName, DBPassword, DBDatabase and DBProvider. 
    keepConnection - Indicates whether to keep the database connection open between the log events. Boolean Default: false
    dbDatabase - Database name. If the ConnectionString is not provided this value will be used to construct the "Database=" part of the connection string. Layout

dbPassword - Database password. If the ConnectionString is not provided this value will be used to construct the "Password=" part of the connection string. Layout

dbHost - Database host name. If the ConnectionString is not provided this value will be used to construct the "Server=" part of the connection string. Layout

connectionStringName使用app.config里的连接字符串配置
keepConnection默认是false

需要预先建好数据库表
    -->
    <target name="databaseTg" xsi:type="Database" connectionStringName="SqlSeverConnString" keepConnection="true" commandType="Text"
            commandText="insert into Log(LogLevel,Message,LogTime) values(@LogLevel,@Message,@LogTime)">

      <!-- 需要预先创建数据库 创建数据库脚本如下 -->
      <!--
      
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Log](
	[Id] [nchar](36) NOT NULL,
	[LogLevel] [nvarchar](5) NULL,
	[Message] [nvarchar](1000) NULL,
	[LogTime] [datetime] NULL,
	[CreateTime] [datetime] NULL,
 CONSTRAINT [PK_Log] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[Log] ADD  CONSTRAINT [DF_Log_Id]  DEFAULT (newid()) FOR [Id]
GO

ALTER TABLE [dbo].[Log] ADD  CONSTRAINT [DF_Log_CreateTime]  DEFAULT (getdate()) FOR [CreateTime]
GO

      -->

      <!-- repeated -->

      <parameter name="@LogLevel" layout="${level}"/>
      <parameter name="@LogTime" layout="${date}"/>
      <parameter name="@Message" layout="${message}" />
      <!-- repeated -->

      <!-- 写日志时执行的命令
      Typically this is a SQL INSERT statement or a stored procedure call. It should use the database-specific parameters (marked as @parameter for SQL server or :parameter for Oracle, other data providers have their own notation) 
      
      -->
    </target>


  </targets>

  <rules>
    <!-- add your logging rules here -->

    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" />
    -->

    <!--将所有的日志发送到consoletg,filetg

rules定义了路由规则，每个logger对应一个规则，默认所有的规则都要匹配一遍
name - 日志源/记录者的名字 (允许使用通配符*)
minlevel - 该规则所匹配日志范围的最低级别
maxlevel - 该规则所匹配日志范围的最高级别
level - 该规则所匹配的单一日志级别
levels - 该规则所匹配的一系列日志级别，由逗号分隔。
writeTo - 规则匹配时日志应该被写入的一系列目标，由逗号分隔。
final - 标记当前规则为最后一个规则。其后的规则即时匹配也不会被运行。
Trace,Debug,Info,Warn,Error,Fatal
尽量使用Debug打印不重要的信息， Debug及以下级别在实际部署中将会去掉
enalbed配置规则是否生效  改成false可以不记日志
    -->
    <!-- 定义规则：在产品上线时，Trace和Debug信息将被抛弃 -->
    <!--<logger name="*" levels="Trace,Debug,Info,Warn,Error,Fatal" enabled="true" writeTo="filetg,allFiletg,consoletg" />-->
    <logger name="*" levels="Trace,Debug,Warn,Error,Fatal" enabled="true" writeTo="filetg" />
    <logger name="*" levels="Trace,Debug,Info,Warn,Error,Fatal" enabled="true" writeTo="allFiletg" />
    <logger name="*" levels="Trace,Debug,Info,Warn,Error,Fatal" enabled="true" writeTo="consoletg" />
  </rules>
</nlog>